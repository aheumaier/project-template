[user]
	name = Andreas Heumaier
	email = andreas.heumaier@microsoft.com
[protocol]
    version = 2
[color]
  diff = auto
  ui = auto
  status = auto
  branch = auto
  interactive = auto
  # pager = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = green
  changed = yellow bold
  untracked = red bold
  untracked = cyan

[alias]
  st = status -sb
  ci = commit
  br = branch
  brn = rev-parse --abbrev-ref HEAD
  co = checkout
  df = diff
  dfw = diff --word-diff
  lol = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%cn%Creset %Cblue(%cr)%Creset' --abbrev-commit --date=relative
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  lolr = log --graph --full-history --all --pretty=format:'%x1b[31m%h%x09%x1b[32m %C(white)- %d%x1b[0m%x20%s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --author=Heumaier
  lg = log --graph --all --full-history --pretty=format:'%x1b[31m%h%x09%x1b[32m %C(white)- %d%x1b[0m%x20%s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative
  ls = ls-files
  ign = !git update-index --assume-unchanged
  unign = !git update-index --no-assume-unchanged
  ignored = !git ls-files -v | grep ^[a-z]
  start = !git init && git commit --allow-empty -m 'build: empty initial commit'
  merges = "!git log --pretty=format:'%h %s %Cred%cr%Creset %aN' --graph --first-parent --merges \"$(git rev-parse --abbrev-ref HEAD)\""
  dc = "!git log --pretty=format:'%h %Cred%cr%Creset %aN %f' --graph --first-parent --no-merges \"$(git rev-parse --abbrev-ref HEAD)\""
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ $`echo $VAR` = \\\"$OLD\\\" ]]; then export $VAR=\\\"$NEW\\\"; fi\" $@; }; f"
  stash-all = stash save --include-untracked
  # sorted tags
  stag = !git log --tags --simplify-by-decoration --pretty='format:%ci %d' | grep 'tag:'
  # List available aliases
  aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
  # Command shortcuts
  # Display tree-like log, because default log is a pain…
  # lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  # Useful when you have to update your last commit
  # with staged files without editing the commit message.
  oops = commit --amend --no-edit
  # Ensure that force-pushing won't lose someone else's work (only mine).
  push-with-lease = push --force-with-lease
  # Rebase won’t trigger hooks on each "replayed" commit.
  # This is an ugly hack that will replay each commit during rebase with the
  # standard `commit` command which will trigger hooks.
  rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
  # List local commits that were not pushed to remote repository
  review-local = "!git lg @{push}.."
  # Edit last commit message
  reword = commit --amend
  # Undo last commit but keep changed files in stage
  uncommit = reset --soft HEAD~1
  # Remove file(s) from Git but not from disk
  untrack = rm --cache --

[status]
  showUntrackedFiles = all

[core]
  # VSCode
  editor = code --force-device-scale-factor=2 --wait
  # Don't consider trailing space change as a cause for merge conflicts
  whitespace = -trailing-space
[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # Show renames/moves as such
  renames = true
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .
  # Display submodule-related information (commit listings)
  submodule = log
  # Use VSCode as default diff tool when running `git diff-tool`
  tool = vscode
[difftool "vscode"]
    cmd = code --force-device-scale-factor=2 --wait --diff $LOCAL $REMOTE
